/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


ddtSchemes
{
    default                             steadyState;
}

gradSchemes
{
    default                             Gauss linear;
    grad(U)                             cellLimited Gauss linear 0.5;
}

divSchemes
{
    default                             bounded Gauss linearUpwind grad(U);
   // default                             bounded Gauss upwind;
  //  default                             bounded Gauss upwind;
    div(phi,U)                          bounded Gauss upwind;
 //   div(phi,U)                          bounded Gauss linearUpwind grad(U);
 //   div(phi,K)                          bounded Gauss linearUpwind grad(U);
 //   div(phi,k)                          bounded Gauss linearUpwind grad(U);
 //   div(phi,omega)                      bounded Gauss linearUpwind grad(U);
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
 //   div(phiRho,(0.5*magSqr(U)))         bounded Gauss linear;
}

laplacianSchemes
{
    // default                             Gauss linear limited corrected 0.2;
    //  default                             Gauss linear uncorrected;       //orthogonal mesh
    // default                             Gauss upwind banana;       //orthogonal mesh
    default                             none;       //orthogonal mesh
   laplacian((rho*nuEff),U)		Gauss linear uncorrected;
   // laplacian((DEff*CO),(thermo:rho|molM))		Gauss upwind phi uncorrected;
   // laplacian((DEff*CO2),(thermo:rho|molM))		Gauss upwind phi uncorrected;
   // laplacian((DEff*O2),(thermo:rho|molM))		Gauss upwind phi uncorrected;
   // laplacian((DEff*(thermo:rho|molM)),CO)		Gauss upwind phi uncorrected;
   // laplacian((DEff*(thermo:rho|molM)),CO2)		Gauss upwind phi uncorrected;
   // laplacian((DEff*(thermo:rho|molM)),O2)		Gauss upwind phi uncorrected;
   laplacian((DEff*CO),(thermo:rho|molM))		Gauss upwind MGradT uncorrected;
   laplacian((DEff*CO2),(thermo:rho|molM))		Gauss upwind MGradT uncorrected;
   laplacian((DEff*O2),(thermo:rho|molM))		Gauss upwind MGradT uncorrected;
   laplacian((DEff*(thermo:rho|molM)),CO)		Gauss upwind MGradT uncorrected;
   laplacian((DEff*(thermo:rho|molM)),CO2)		Gauss upwind MGradT uncorrected;
   laplacian((DEff*(thermo:rho|molM)),O2)		Gauss upwind MGradT uncorrected;

//    laplacian((kappaEff*(1-epsEff)),TSolid)		Gauss linear uncorrected;
   laplacian(kappaEff,TSolid)		Gauss downwind MGradT uncorrected;
   laplacian(((sumZones*kappaEff)*(1-epsEff)),TSolid)		Gauss downwind MGradT uncorrected;
   laplacian((((jedna-sumZones)*kappaEff)*(1-epsEff)),TSolid)		Gauss downwind MGradT uncorrected;
   laplacian(((((kappaA+(kappaB*T))+(kappaC*pow(T,2)))+(kappaD*pow(T,3)))*epsEff),T)		Gauss downwind MGradT uncorrected;
   laplacian((rho*rAU),p)		Gauss linear uncorrected;
    //default                             Gauss upwind banana;       //orthogonal mesh
}

interpolationSchemes
{
    default                             none;
    flux((rho*HbyA))                    linear;
    flux(HbyA)                          linear;
    interpolate(rho)                    linear;
}

snGradSchemes
{
    // default                             limited corrected 0.2;
    default                             uncorrected;                            // orthogonal mesh
}

fluxRequired
{
    default         no;
    p;
}

wallDist
{
    method          meshWave;
    correctWalls    true;
}

// ************************************************************************* //
