/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// reactions taken into account
// C0 + 0.5O2 -> CO2        (reaction01)
// CO + NO -> CO2 + 0.5N2   (reaction02)
// 0.5CO + NO -> CO2 + N2O  (reaction03)
// N2O -> N2 + 0.5O2        (reaction04)


// ON WALL COATING
// reactionSourceCO
// {
//     type            scalarCodedSource;	//scalarSemiImplicitSource
//     active          yes;
//     name	        reactionSourceCO;
//     //~ selectionMode   all;
//     selectionMode   cellZone;
//     cellZone        coating;
    
//     // in reactions
//     // C0 + 0.5O2 -> CO2        (reaction01)
//     // CO + NO -> CO2 + 0.5N2   (reaction02)
//     // 0.5CO + NO -> CO2 + N2O  (reaction03)

//     scalarCodedSourceCoeffs
//     {
//         //~ selectionMode       all;
//         selectionMode   cellZone;
//         cellZone        coating;

//     	fields 		        (CO);

//     	fieldNames	        (CO);
//     	//~ redirectType		sourceTime;

//         codeInclude
//         #{
//             #include "fvCFD.H"
//         #};

//         codeCorrect
//         #{
//             //~ Pout<< "**codeCorrect**" << endl;
//         #};

//         codeAddSup
//         #{            
//             #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
//             // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
//             //     readScalar(
//             //         transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
//             //     )
//             // );
            
//             // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
//             word currSpName("CO");
            
//             #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
//         #};
                    
//         codeSetValue
//         #{
//             //Pout<< "**codeSetValue**" << endl;
//         #};

//         // Dummy entry. Make dependent on above to trigger recompilation
//         code
//         #{
//             $codeInclude
//             $codeCorrect
//             $codeAddSup
//             $codeSetValue
//         #};
//     }

//     reactionSourceCOCoeffs
//     {
//         selectionMode   cellZone;
//         cellZone        coating;
//     }
// }

// reactionSourceO2
// {
//     type            scalarCodedSource;	//scalarSemiImplicitSource
//     active          yes;
//     name	        reactionSourceO2;
//     //~ selectionMode   all;
//     selectionMode   cellZone;
//     cellZone        coating;
    
//     // in reactions
//     // C0 + 0.5O2 -> CO2        (reaction01)
//     // N2O -> N2 + 0.5O2        (reaction04)

//     scalarCodedSourceCoeffs
//     {
//         //~ selectionMode       all;
//         selectionMode   cellZone;
//         cellZone        coating;

//     	fields 		        (O2);

//     	fieldNames	        (O2);
//     	redirectType		sourceTime;

//         codeInclude
//         #{
//             #include "fvCFD.H"
//         #};

//         codeCorrect
//         #{
//             //~ Pout<< "**codeCorrect**" << endl;
//         #};

//         codeAddSup
//         #{            
//             #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
//             // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
//             //     readScalar(
//             //         transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
//             //     )
//             // );
            
//             // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
//             word currSpName("O2");
            
//             #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
//         #};

//         codeSetValue
//         #{
//             //Pout<< "**codeSetValue**" << endl;
//         #};

//         // Dummy entry. Make dependent on above to trigger recompilation
//         code
//         #{
//             $codeInclude
//             $codeCorrect
//             $codeAddSup
//             $codeSetValue
//         #};
//     }

//     reactionSourceO2Coeffs
//     {
//         selectionMode   cellZone;
//         cellZone        coating;
//     }
// }

// reactionSourceCO2
// {
//     type            scalarCodedSource;	//scalarSemiImplicitSource
//     active          yes;
//     name	        reactionSourceCO2;
//     //~ selectionMode   all;
//     selectionMode   cellZone;
//     cellZone        coating;
    
//     // in reactions
//     // C0 + 0.5O2 -> CO2        (reaction01)
//     // N2O -> N2 + 0.5O2        (reaction04)

//     scalarCodedSourceCoeffs
//     {
//         //~ selectionMode       all;
//         selectionMode   cellZone;
//         cellZone        coating;

//     	fields 		        (CO2);

//     	fieldNames	        (CO2);
//     	redirectType		sourceTime;

//         codeInclude
//         #{
//             #include "fvCFD.H"
//         #};

//         codeCorrect
//         #{
//             //~ Pout<< "**codeCorrect**" << endl;
//         #};

//         codeAddSup
//         #{            
//             #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
//             // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
//             //     readScalar(
//             //         transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
//             //     )
//             // );
            
//             // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
//             word currSpName("CO2");
            
//             #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
//         #};

//         codeSetValue
//         #{
//             //Pout<< "**codeSetValue**" << endl;
//         #};

//         // Dummy entry. Make dependent on above to trigger recompilation
//         code
//         #{
//             $codeInclude
//             $codeCorrect
//             $codeAddSup
//             $codeSetValue
//         #};
//     }

//     reactionSourceCO2Coeffs
//     {
//         selectionMode   cellZone;
//         cellZone        coating;
//     }
// }


// both zones
reactionSourceCOIW
{
    // type            scalarCodedSource;	//scalarSemiImplicitSource
    type            coded;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCOIW;
    selectionMode   all;
    // selectionMode   cellZone;
    // cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        selectionMode       all;
        // selectionMode   cellZone;
        // cellZone        inWallPorosity;

    	fields 		        (CO);

    	fieldNames	        (CO);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            //~ Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
            //     readScalar(
            //         transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
            //     )
            // );
            
            // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("CO");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCOIWCoeffs
    {
    //    selectionMode   cellZone;
        // cellZone        coating;
        selectionMode   all;
    }
}

reactionSourceO2IW
{
    // type            scalarCodedSource;	//scalarSemiImplicitSource
    type            coded;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceO2IW;
    selectionMode   all;
    // selectionMode   cellZone;
    // cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        selectionMode       all;
        // selectionMode   cellZone;
        // cellZone        inWallPorosity;

    	fields 		        (O2);

    	fieldNames	        (O2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            //~ Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
            //     readScalar(
            //         transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
            //     )
            // );
            
            // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("O2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceO2IWCoeffs
    {
       selectionMode   all;
    //    selectionMode   cellZone;
        // cellZone        coating;
    }
}

reactionSourceCO2IW
{
    // type            scalarCodedSource;	//scalarSemiImplicitSource
    type            coded;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCO2IW;
    selectionMode   all;
    // selectionMode   cellZone;
    // cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        selectionMode       all;
        // selectionMode   cellZone;
        // cellZone        inWallPorosity;

    	fields 		        (CO2);

    	fieldNames	        (CO2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            //~ Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
            //     readScalar(
            //         transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
            //     )
            // );
            
            // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("CO2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCO2IWCoeffs
    {
       selectionMode   all;
    //    selectionMode   cellZone;
        // cellZone        coating;
    }
}

// enthalpySourceONWALL
// {
//     type            scalarCodedSource;	//scalarSemiImplicitSource
//     active          yes;
//     name	        enthalpySourceONWALL;
//    //~ // selectionMode   all;
//     selectionMode   cellZone;
//     cellZone        coating;
    
//     scalarCodedSourceCoeffs
//     {
//      //~ //   selectionMode       all;
//         selectionMode   cellZone;
//         cellZone        coating;

//     	fields 		        (T);

//     	fieldNames	        (T);
//     	redirectType		sourceTime;

//         codeInclude
//         #{
//             #include "fvCFD.H"
//             #include "../../constant/rnTerms/rCp.H"
//         #};

//         codeCorrect
//         #{
//             //~ Pout<< "**codeCorrect**" << endl;
//         #};

//         codeAddSup
//         #{            
//             #include "../../constant/rnTerms/loadCommonDataH.H"          //load data common to all the reactions
            
//             scalar  coatingVolFrac(                                     //read volumetric fraction of coating
//                 readScalar(
//                     transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
//                 )
//             );
            
//             const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
                        
//             #include "../../constant/rnTerms/compEnthV2.H"                  //load reaction enthalpy source
//         #};
                    
//         codeSetValue
//         #{
//             //Pout<< "**codeSetValue**" << endl;
//         #};

//         // Dummy entry. Make dependent on above to trigger recompilation
//         code
//         #{
//             $codeInclude
//             $codeCorrect
//             $codeAddSup
//             $codeSetValue
//         #};
//     }

//     enthalpySourceONWALLCoeffs
//     {
//         selectionMode   cellZone;
//         cellZone        coating;
//     }
// }

enthalpySourceINWALL
{
    // type            scalarCodedSource;	//scalarSemiImplicitSource
    type            coded;	//scalarSemiImplicitSource
    active          yes;
    name	        enthalpySourceINWALL;
    selectionMode   all;
    // selectionMode   cellZone;
    // cellZone        inWallPorosity;
    
    scalarCodedSourceCoeffs
    {
        selectionMode       all;
        // selectionMode   cellZone;
        // cellZone        inWallPorosity;

    	fields 		        (T);

    	fieldNames	        (T);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
            // #include "../../constant/rnTerms/rCp.H"
        #};

        codeCorrect
        #{
            //~ Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            // scalar  coatingVolFrac(                                     //read volumetric fraction of coating
            //     readScalar(
            //         transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
            //     )
            // );
            
            // const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
                        
            #include "../../constant/rnTerms/compEnthV2.H"                  //load reaction enthalpy source
        #};
                    
        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    enthalpySourceINWALLCoeffs
    {
        selectionMode   all;
        // selectionMode   cellZone;
        // cellZone        inWallPorosity;
    }
}
// ************************************************************************* //
